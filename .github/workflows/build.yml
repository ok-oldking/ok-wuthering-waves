name: Build Windows Executable

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*'

jobs:
  build:
    name: Build exe with launcher
    runs-on: windows-latest

    env:
      PYTHONIOENCODING: 'UTF-8'
      #      SIGN_BUILD: 'true'
      SIGN_BUILD: 'false'

    strategy:
      matrix:
        python-version: [ 3.12 ]

    steps:
      - name: Configure git
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global user.email "ok-oldking@users.noreply.github.com"
          git config --global user.name "ok-oldking"
          echo "action_state=yellow" >> $env:GITHUB_ENV
          echo "${{ env.action_state }}"

      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set UTF-8 encoding
        run: |
          set PYTHONIOENCODING=utf-8
          set PYTHONLEGACYWINDOWSSTDIO=utf-8
          echo PYTHONIOENCODING=utf-8 >> $GITHUB_ENV

      - name: Get Changes between Tags
        id: changes
        uses: simbo/changes-between-tags-action@v1
        with:
          include-hashes: false
          validate-tag: false

      - name: Get tag name
        id: tagName
        uses: olegtarasov/get-tag@v2.1.3


      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: inline_ok_requirements
        run: |
          python -m ok.update.inline_ok_requirements --tag ${{ steps.tagName.outputs.tag }}

      - name: Run tests
        run: |
          Get-ChildItem -Path ".\tests\*.py" | ForEach-Object {
              Write-Host "Running tests in $($_.FullName)"
              try {
                  # Run the Python unittest command
                  python -m unittest $_.FullName

                  # Check if the previous command succeeded
                  if ($LASTEXITCODE -ne 0) {
                      throw "Tests failed in $($_.FullName)"
                  }
              } catch {
                  # Stop the loop and return the error
                  Write-Error $_
                  exit 1
              }
          }

      - name: Sync Repositories
        id: sync   # Give the step an ID to access its outputs
        uses: ok-oldking/partial-sync-repo@master # Replace with your action path
        with:
          repos: |
            https://ok-oldking:${{ secrets.OK_GH }}@github.com/ok-oldking/ok-ww-update
            https://cnb:${{ secrets.CNB_TOKEN }}@cnb.cool/ok-oldking/ok-wuthering-waves.git
          sync_list: 'deploy.txt'
          tag: ${{ github.ref_name }}
          gitignore_file: '.update_repo_gitignore'
          show_author: true

      - name: Build with PyAppify Action
        id: build-app
        uses: ok-oldking/pyappify-action@master
        with:
          use_release: https://api.github.com/repos/ok-oldking/ok-wuthering-waves/releases/tags/v2.4.55

      - name: Extract EXE for signing
        if: env.SIGN_BUILD == 'true'
        id: extract-exe
        shell: pwsh
        run: |
          $zipFile = Get-ChildItem -Path pyappify_dist -Filter *.zip | Select-Object -First 1
          Expand-Archive -Path $zipFile.FullName -DestinationPath "temp_extract" -Force
          $exeFile = Get-ChildItem -Path "temp_extract" -Filter *.exe -Recurse | Select-Object -First 1
          Move-Item -Path $exeFile.FullName -Destination "pyappify_dist/"
          echo "EXE_NAME=$($exeFile.Name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Remove-Item "temp_extract" -Recurse

      - name: Upload unsigned EXE artifact
        if: env.SIGN_BUILD == 'true'
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          name: to-sign
          path: pyappify_dist/${{ steps.extract-exe.outputs.EXE_NAME }}

      - name: Sign EXE
        if: env.SIGN_BUILD == 'true'
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '639bc6dd-9623-43cd-ac75-50a445898012'
          project-slug: 'ok-wuthering-waves'
          signing-policy-slug: 'release-signing'
          artifact-configuration-slug: "single-exe"
          github-artifact-id: '${{ steps.upload-unsigned-artifact.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: 'pyappify_dist'

      - name: Update archives with signed EXE
        if: env.SIGN_BUILD == 'true'
        shell: pwsh
        run: |
          $signedExePath = "pyappify_dist/${{ steps.extract-exe.outputs.EXE_NAME }}"
          $zipFiles = Get-ChildItem -Path pyappify_dist -Filter *.zip
          foreach ($zipFile in $zipFiles) {
            $extractPath = ".\temp_update"
            if (Test-Path $extractPath) { Remove-Item $extractPath -Recurse -Force }
            Expand-Archive -Path $zipFile.FullName -DestinationPath $extractPath -Force
            $originalExe = Get-ChildItem -Path $extractPath -Filter *.exe -Recurse | Select-Object -First 1
            Copy-Item -Path $signedExePath -Destination $originalExe.FullName -Force
            Push-Location $extractPath
            $topLevelFolder = Get-ChildItem . | Select-Object -First 1
            Compress-Archive -Path $topLevelFolder.Name -DestinationPath $zipFile.FullName -Force
            Pop-Location
            Remove-Item $extractPath -Recurse -Force
          }
          Remove-Item $signedExePath

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            ### 下载包说明
              * ok-ww-win32.zip 在线安装包, 解压后在线安装. 
              * ok-ww-win32-China.zip 完整包, 更新源使用阿里云+腾讯CNB. 
              * ok-ww-win32-Global.zip full package with dependencies, using GitHub and PyPi as update source 
              * 不要下载SourceCode, Do Not Download the SourceCode
            ### 如果无法下载可以使用, 其他下载源
              * 如果下载过慢可以使用加速或者使用下面渠道下载
              * [Mirror酱下载渠道](https://mirrorchyan.com/zh/projects?rid=okww&source=ok-ww-release), 国内网页直链, 下载需要购买CD-KEY, 已有Mirror酱CD-KEY可免费下载
              * [夸克网盘](https://pan.quark.cn/s/a1052cec4d13), 免费, 但需要注册并下载夸克网盘客户端
            ###  更新日志 ${{ steps.sync.outputs.start_tag }} -> ${{ steps.sync.outputs.end_tag }}:
              ${{ steps.sync.outputs.changes_with_asterisk }}          
          
          draft: false
          prerelease: false
          files: pyappify_dist/*

      - name: Trigger MirrorChyanUploading
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_uploading
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
